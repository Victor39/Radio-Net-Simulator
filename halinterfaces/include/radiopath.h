// ----------------------------------------------------- РАБОТА С РАДИОТРАКТОМ ------------------------------------------------------

#pragma once

#include <stdint.h>

namespace hal {

	class RadioPath {
	public:

        virtual ~RadioPath() {}

		/**
		 *  \details    Инициализация радиоатракта. Чтение настроечных параметров из энергонезависимой памяти...
		 *  \return     NONE
		 */
		virtual void initRadioPath () = 0;

		/**
		 *  \details    Отправка данных в радиоканал. Если передатчик не был включен - то он включается.
		 *  \param[in]  const uint8_t * pData - указатель на массив с данными;
		 *  \param[in]  const size_t length - длина передаваемых данных;
		 *  \return     NONE [возможно, надо выводить результат работы: успех/неудача: тип ошибки и тд...]
		 */
		virtual void radioDataSend (const uint8_t * pData, const size_t length) = 0;

		/**
		 *  \details    Обработчик приёма данных из радиоканала. Если приёмник не был включен - то он включается.
		 *  \param[out]  const uint8_t * pData - указатель на массив с данными;
		 *  \param[in]  const size_t length - длина передаваемых данных;
		 *  \return     NONE [возможно, надо выводить результат работы: успех/неудача: тип ошибки и тд...]
		 */
		virtual void radioDataReceive (const uint8_t * pData, const size_t length) = 0;

		/**
		 *  \details    Включение передатчика.  Если приёмник был выключен, то он включается.
		 *  [Необходимо согласовать с работой передатчика/приёмника/АНСУ/БАФ и тд...] [Тут желательно описать что при этом происходит]
		 *  \param[in, out]  NONE
		 *  \return         NONE [возможно, надо выводить результат работы: успех/неудача: тип ошибки и тд...]
		 */
		virtual void radioTxOn () = 0;

		/**
		 *  \details    Выключение передатчика.
		 *  [Необходимо согласовать с работой передатчика/приёмника/АНСУ/БАФ и тд...] [Тут желательно описать что при этом происходит]
		 *  \param[in, out]  NONE
		 *  \return          NONE [возможно, надо выводить результат работы: успех/неудача: тип ошибки и тд...]
		 */
		virtual void radioTxOff () = 0;

		/**
		 *  \details    Включение приёмника.
		 *  [Необходимо согласовать с работой передатчика/приёмника/АНСУ/БАФ и тд...] [Тут желательно описать что при этом происходит]
		 *  \param[in, out]  NONE
		 *  \return         NONE [возможно, надо выводить результат работы: успех/неудача: тип ошибки и тд...]
		 */
		virtual void radioRxOn () = 0;

		/**
		 *  \details    Выключение приёмника.
		 *  [Необходимо согласовать с работой передатчика/приёмника/АНСУ/БАФ и тд...] [Тут желательно описать что при этом происходит]
		 *  \param[in, out]  NONE
		 *  \return          NONE [возможно, надо выводить результат работы: успех/неудача: тип ошибки и тд...]
		 */
		virtual void radioRxOff () = 0;

		/**
		 *  \details    Установка частоты радиотракта на передачу.
		 *  \param[in]  const uint32_t freqIndex - устанавливаемая частота;
		 *  \return     NONE [возможно, надо выводить результат: частота установлена или ошибка установки частоты и тд]
		 */
		virtual void radioSetTxFreqBy (const uint32_t freqIndex) = 0;

		/**
		 *  \details    Установка частоты радиотракта на прием.
		 *  \param[in]  const uint32_t freqIndex - устанавливаемая частота;
		 *  \return     NONE [возможно, надо выводить результат: частота установлена или ошибка установки частоты и тд]
		 */
		virtual void radioSetRxFreqBy (const uint32_t freqIndex) = 0;

		/**
		 *  \details    Калибровка заданного списка частот. [Необходимо согласовать с работой передатчика/приёмника/АНСУ/БАФ и тд...]
		 *  \param[in]  const uint32_t * pFreqIndexList - указатель на список индексов калибруемых частот
		 *  \param[in]  const size_t size - количество калибруемых частот
		 *  \return     NONE [возможно, надо выводить результат работы: успех/неудача: тип ошибки и тд...]
		 */
		virtual void radioFreqListCalibration (const uint32_t * pFreqIndexList, const size_t size) = 0;
	};
}
